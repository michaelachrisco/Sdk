using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using EdiFabric.Core.Model.Edi.ErrorContexts;
using EdiFabric.Core.Model.Edi.X12;
using EdiFabric.Framework.Writers;
using EdiFabric.Rules.HIPAA_005010X222A1_834;

namespace EdiFabric.Sdk.Hipaa
{
    class Write834Samples
    {
        public static void Run()
        {
            WriteSingleMemberToStream();
        }

        /// <summary>
        /// Generate and write benefit enrollment to a stream
        /// </summary>
        static void WriteSingleMemberToStream()
        {
            Debug.WriteLine("******************************");
            Debug.WriteLine(MethodBase.GetCurrentMethod().Name);
            Debug.WriteLine("******************************");

            //  1.  Construct the benefit enrollment message with data from database, service or domain objects\logic.
            var claim = CreateBenefit("00000001");

            //  2.  Validate it to ensure the object adheres to the rule
            //  Always skip trailer validation because all trailers are automatically generated by the writer
            MessageErrorContext errorContext;
            if (claim.IsValid(out errorContext, true))
            {
                Debug.WriteLine("Message {0} with control number {1} is valid.", errorContext.Name, errorContext.ControlNumber);

                //  3.  Write to a stream
                using (var stream = new MemoryStream())
                {
                    //  4.  Use CRLF(new line) as segment postfix for clarity
                    //  Always agree postfixes and separators with the trading partner
                    var writer = new X12Writer(stream, Encoding.Default, Environment.NewLine);

                    //  5.  Begin with ISA segment
                    writer.Write(CreateIsa("000011111"));
                    //  6.  Follow up with GS segment
                    writer.Write(CreateGs("111111111"));
                    //  7.  Write all transactions
                    //  Batch up as many as needed
                    writer.Write(claim);
                    //  No need to close any of the above

                    //  8.  Always flush at the end to release the cache
                    writer.Flush();

                    Debug.Write(LoadString(stream));
                }
            }
            else
            {
                //  The benefit enrollment is invalid
                //  Report it back to the sender, log, etc.

                //  Inspect MessageErrorContext for the validation errors
                var errors = errorContext.Flatten();

                Debug.WriteLine("Message {0} with control number {1} is invalid with errors:", errorContext.Name, errorContext.ControlNumber);
                foreach (var error in errors)
                {
                    Debug.WriteLine(error);
                }
            }
        }


        /// <summary>
        /// Sample claim
        /// </summary>
        static TS834 CreateBenefit(string controlNumber)
        {
            string CurrentDate = DateTime.Now.ToString("yyyyMMdd");
            var result = new TS834();

            //Heading
            result.ST = new ST();
            result.ST.TransactionSetIdentifierCode_01 = "834";
            result.ST.TransactionSetControlNumber_02 = controlNumber.PadLeft(9, '0');
            result.ST.ImplementationConventionPreference_03 = "005010X222A1";
            result.BGN = new BGN();
            result.BGN.TransactionSetPurposeCode_01 = "00";
            result.BGN.TransactionSetReferenceNumber_02 = "WSU-WEY-20050221-1";
            result.BGN.TransactionSetCreationDate_03 = CurrentDate;
            result.BGN.TransactionSetCreationTime_04 = DateTime.Now.ToString("hhmmss");
            result.BGN.TimeZoneCode_05 = "PT"; //Optional but most Carriers use
            //result.BGN.ReferenceIdentification_06 = ""; //Not usually sent
            result.BGN.ActionCode_07 = "4"; //2 = Change, 4 = Verify, RX = replace
            //Optional REF
            result.REF_TransactionSetPolicyNumber = new REF();
            result.REF_TransactionSetPolicyNumber.ReferenceIdentificationQualifier_01 = "38";
            result.REF_TransactionSetPolicyNumber.ReferenceIdentification_02 = "01-23456";//Carrier/Vendor specific

            //Optional DTP
            result.DTP_FileEffectiveDate.DateTimeQualifier_01 = "007";
            result.DTP_FileEffectiveDate.DateTimePeriodFormatQualifier_02 = "D8";
            result.DTP_FileEffectiveDate.DateTimePeriod_03 = CurrentDate;

            //Optional QTY
            result.QTY_TransactionSetControlTotals = new QTY();
            result.QTY_TransactionSetControlTotals.QuantityQualifier_01 = "TO";
            result.QTY_TransactionSetControlTotals.Quantity_02 = "1";//Only one record for this example.

            //Loop 1000
            result.All_NM1 = new All_NM1();

            //Loop 1000A
            result.All_NM1.Loop_1000A = new Loop_1000A();
            result.All_NM1.Loop_1000A.NM1_SponsorName.EntityIdentifierCode_01 = "P5";
            result.All_NM1.Loop_1000A.NM1_SponsorName.Name_02 = "Sponsor Name";
            result.All_NM1.Loop_1000A.NM1_SponsorName.IdentificationCodeQualifier_03 = "FI";
            result.All_NM1.Loop_1000A.NM1_SponsorName.IdentificationCode_04 = "1223456";

            //Loop 1000B
            result.All_NM1.Loop_1000B = new Loop_1000B();
            result.All_NM1.Loop_1000B.NM1_PayerName.EntityIdentifierCode_01 = "IN";
            result.All_NM1.Loop_1000B.NM1_PayerName.Name_02 = "ABC PAYER";
            result.All_NM1.Loop_1000B.NM1_PayerName.IdentificationCodeQualifier_03 = "FI";
            result.All_NM1.Loop_1000B.NM1_PayerName.IdentificationCode_04 = "11-111111";

            //result.All_NM1.Loop_1000C = new Loop_1000C();
            //Usually brokers are optional fields

            //Loop 2000
            //INS
            result.Loop_2000 = new List<Loop_2000>();
            Loop_2000 Loop_2000 = new Loop_2000();
            Loop_2000.INS = new INS();
            Loop_2000.INS.YesNoConditionorResponseCode_01 = "Y";//Subscriber/Member record
            Loop_2000.INS.IndividualRelationshipCode_02 = "18";
            Loop_2000.INS.MaintenanceTypeCode_03 = "021";
            Loop_2000.INS.MaintenanceReasonCode_04 = "20";
            Loop_2000.INS.BenefitStatusCode_05 = "A";
            Loop_2000.INS.MedicarePlanCode_06 = "E";
            //Loop_2000.INS.ConsolidatedOmnibusBudgetReconciliationActCOBRAQualifyingEventCode_07 = "0";
            Loop_2000.INS.EmploymentStatusCode_08 = "AC";
            //Loop_2000.INS.StudentStatusCode_09 = "N";
            Loop_2000.INS.YesNoConditionorResponseCode_10 = "N";
            //Loop_2000.INS.DateTimePeriodFormatQualifier_11 = "";//Dealth Date: Carrier specific
            //Loop_2000.INS.DateTimePeriod_12 = "";
            Loop_2000.INS.ConfidentialityCode_13 = "";//Usually left blank.
            //Loop_2000.INS.CityName_14 = "City"; //14-17 usually not sent in favor of N3/N4 segments

            Loop_2000.Ref_SubscriberIdentifier = new REF();
            Loop_2000.Ref_SubscriberIdentifier.ReferenceIdentificationQualifier_01 = "0F";
            Loop_2000.Ref_SubscriberIdentifier.ReferenceIdentification_02 = "12345678";//typically a UUID or SSN

            Loop_2000.Ref_MemberSupplementalIdentifier = new REF();
            Loop_2000.Ref_MemberSupplementalIdentifier.ReferenceIdentificationQualifier_01 = "1L";
            Loop_2000.Ref_MemberSupplementalIdentifier.ReferenceIdentification_02 = "ABC123";//Group or Policy Number usually Carrier specific

            DTP DTP_MemberHireSegment = new DTP();
            DTP_MemberHireSegment.DateTimeQualifier_01 = "336";
            DTP_MemberHireSegment.DateTimePeriodFormatQualifier_02 = "D8";
            DTP_MemberHireSegment.DateTimePeriod_03 = "20170501";

            DTP DTP_MemberEffectiveSegment = new DTP();
            DTP_MemberEffectiveSegment.DateTimeQualifier_01 = "356";
            DTP_MemberEffectiveSegment.DateTimePeriodFormatQualifier_02 = "D8";
            DTP_MemberEffectiveSegment.DateTimePeriod_03 = "20170601";

            //Example term of coverage
            //DTP DTP_MemberEligibilityEndSegment = new DTP();
            //DTP_MemberEligibilityEndSegment.DateTimeQualifier_01 = "357";
            //DTP_MemberEligibilityEndSegment.DateTimePeriodFormatQualifier_02 = "D8";
            //DTP_MemberEligibilityEndSegment.DateTimePeriod_03 = "20171231";

            Loop_2000.DTP_MemberLevelDates.Add(DTP_MemberHireSegment);
            Loop_2000.DTP_MemberLevelDates.Add(DTP_MemberEffectiveSegment);
            result.Loop_2000.Add(Loop_2000);

            result.Loop_2100A = new List<Loop_2100A>();
            Loop_2100A Loop_2100A = new Loop_2100A();
            Loop_2100A.NM1_MemberName = new NM1();
            Loop_2100A.NM1_MemberName.EntityIdentifierCode_01 = "IL";
            Loop_2100A.NM1_MemberName.Name_02 = "1";
            Loop_2100A.NM1_MemberName.IdentificationCodeQualifier_03 = "MemberLastName";
            Loop_2100A.NM1_MemberName.IdentificationCode_04 = "MemberFirstname";
            //Optional Loop 2100A Segment NM1 05-09

            Loop_2100A.Per_MemberCommunicationNumbers = new PER();
            Loop_2100A.Per_MemberCommunicationNumbers.ContactFunctionCode_01 = "IP";
            //Loop_2100A.Per_MemberCommunicationNumbers.Name_02 = "abc123";
            Loop_2100A.Per_MemberCommunicationNumbers.CommunicationNumberQualifier_03 = "CP";
            Loop_2100A.Per_MemberCommunicationNumbers.CommunicationNumber_04 = "9991111111";
            //Optional Loop 2100A Segment Per

            Loop_2100A.N3_MemberResidenceStreetAddress = new N3_MemberResidenceStreetAddress();
            Loop_2100A.N3_MemberResidenceStreetAddress.Address_Information_01 = "444 Fake street";
            Loop_2100A.N3_MemberResidenceStreetAddress.Address_Information_02 = "Apt 300";

            Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode = new N4_OtherSubscriberCity_State_ZIPCode();
            Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.OtherSubscriberCityName_01 = "TestCity";
            Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.OtherSubscriberStateorProvinceCode_02 = "CA";
            Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.OtherSubscriberPostalZoneorZIPCode_03 = "93710";
            //Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.CountryCode_04 = "US";//Optional. Only outside the US.
            //Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.LocationQualifier_05 = "";//Optional. 60 = Area and CY = Country/Parish
            //Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.LocationIdentifier_06 = "";//Optional. Carrier/Plan specific.
            //Loop_2100A.N4_OtherSubscriberCity_State_ZIPCode.CountrySubdivisionCode_07 = "";//Optional. Use country subdivision codes ISO 3166.

            Loop_2100A.DMG_MemberDemographicInformation = new DMG_MemberDemographicInformation();
            Loop_2100A.DMG_MemberDemographicInformation.DateTimePeriodFormatQualifier_01 = "D8";
            Loop_2100A.DMG_MemberDemographicInformation.SubscriberBirthDate_02 = "19330706";
            Loop_2100A.DMG_MemberDemographicInformation.SubscriberGenderCode_03 = "M";
            //Optional Loop 2100A Segment DMG 04-11

            //Optional sgment unless Carrier/Client specifically ask for it.
            Loop_2100A.EC_EmploymentClass = new EC_EmploymentClass();
            Loop_2100A.EC_EmploymentClass.EmpoymentClassCode_01 = "01";
            Loop_2100A.EC_EmploymentClass.EmpoymentClassCode_02 = "03";
            Loop_2100A.EC_EmploymentClass.EmpoymentClassCode_03 = "11";

            //Optional Member Income segment
            //Used for Carriers/Employeers that need specific member income amounts as part of billable plans.
            Loop_2100A.ICM_MemberIncome.FrequencyCode_01 = "1";//Typically weekly or monthly
            Loop_2100A.ICM_MemberIncome.MonetaryAmount_02 = "2000";
            Loop_2100A.ICM_MemberIncome.Quantity_03 = "40";
            Loop_2100A.ICM_MemberIncome.LocationIdentifier_04 = "93710";//Most will default to a an internal location code or Zip
            Loop_2100A.ICM_MemberIncome.SalaryGrade_05 = "A";//Abitrary Code set by the employeer

            //TODO: Optional Segments
            //AMT Member Policy Amounts
            //HLH Member Health Information
            //LUI Member Language
            //NM1 Member mailing Address
            //N3 Member Mail Street Address
            //N4 Member Mail city, State, Zip
            result.Loop_2100A.Add(Loop_2100A);

            //Loop 2200:
            //DSB Disability Info
            //DTP Disability Eligibility Dates

            //Loop 2300 (Required on most Carriers)
            result.Loop_2300 = new List<Loop_2300>();
            Loop_2300 Loop_2300 = new Loop_2300();
            Loop_2300.HD_HealthCoverage = new HD();
            Loop_2300.HD_HealthCoverage.MaintenanceTypeCode_01 = "026";
            //Loop_2300.HD_HealthCoverage.MaintenanceReasonCode_02 = "1";//usually Carrier specific
            Loop_2300.HD_HealthCoverage.InsuranceLineCode_03 = "PPO";
            Loop_2300.HD_HealthCoverage.PlanCoverageDescription_04 = "Test PPO Plan";//Optional. Some carriers make this a required field with specific reporting values.
            Loop_2300.HD_HealthCoverage.CoverageLevelCode_05 = "EMP";//Employee only is usually EMP or IND Carrier specific
            //06-07 almost never used
            Loop_2300.HD_HealthCoverage.UnderwritingDecisionCode_08 = "Y";//Y/N value but can be removed if nessessary
            Loop_2300.HD_HealthCoverage.YesNoConditionorResponseCode_09 = "N";//Sometimes used as a Late Enrollment Indicator

            DTP DTP_MaintenanceEffective = new DTP();
            DTP_MaintenanceEffective.DateTimeQualifier_01 = "303";
            DTP_MaintenanceEffective.DateTimePeriodFormatQualifier_02 = "D3";
            DTP_MaintenanceEffective.DateTimePeriod_03 = "20151001";
            Loop_2300.DTP_HealthCoverageDates.Add(DTP_MaintenanceEffective);

            DTP DTP_BenefitBegin = new DTP();
            DTP_BenefitBegin.DateTimeQualifier_01 = "348";
            DTP_BenefitBegin.DateTimePeriodFormatQualifier_02 = "348";
            DTP_BenefitBegin.DateTimePeriod_03 = "20150901";
            Loop_2300.DTP_HealthCoverageDates.Add(DTP_BenefitBegin);

            REF REF_ClientReportingCategory = new REF();
            REF_ClientReportingCategory.ReferenceIdentificationQualifier_01 = "17";
            REF_ClientReportingCategory.ReferenceIdentification_02 = "12345";
            Loop_2300.REF_HealthCoveragePolicyNumbers.Add(REF_ClientReportingCategory);

            REF REF_GroupPolicyNumber = new REF();
            REF_GroupPolicyNumber.ReferenceIdentificationQualifier_01 = "1L";
            REF_GroupPolicyNumber.ReferenceIdentification_02 = "54321";
            Loop_2300.REF_HealthCoveragePolicyNumbers.Add(REF_GroupPolicyNumber);

            result.Loop_2300.Add(Loop_2300);

            result.Loop_2310 = new List<Loop_2310>();
            Loop_2310 Loop_2310 = new Loop_2310();
            Loop_2310.LX_ProviderInformation = new LX();
            Loop_2310.LX_ProviderInformation.AssignedNumber_01 = "1";

            Loop_2310.NM1_ReferingProviderName = new NM1_ReferringProviderName();
            Loop_2310.NM1_ReferingProviderName.EntityIdentifierCode_01 = "OD";
            Loop_2310.NM1_ReferingProviderName.EntityTypeQualifier_02 = "1";
            Loop_2310.NM1_ReferingProviderName.ReferringProviderLastName_03 = "ABC Hospital";
            Loop_2310.NM1_ReferingProviderName.ReferringProviderFirstName_04 = "Care";
            Loop_2310.NM1_ReferingProviderName.ReferringProviderMiddleNameorInitial_05 = "A";
            Loop_2310.NM1_ReferingProviderName.NamePrefix_06 = "Sr";
            Loop_2310.NM1_ReferingProviderName.ReferringProviderNameSuffix_07 = "";
            Loop_2310.NM1_ReferingProviderName.IdentificationCodeQualifier_08 = "SV";
            Loop_2310.NM1_ReferingProviderName.ReferringProviderIdentifier_09 = "Doc PPO";
            Loop_2310.NM1_ReferingProviderName.EntityRelationshipCode_10 = "25";

            result.Loop_2310.Add(Loop_2310);

            result.Loop_2320 = new List<Loop_2320>();
            Loop_2320 Loop_2320 = new Loop_2320();
            Loop_2320.COB_CoordinationOfBenefits.PayerResponsibilitySequenceNumberCode_01 = "P";
            Loop_2320.COB_CoordinationOfBenefits.ReferenceIdentification_02 = "A";
            Loop_2320.COB_CoordinationOfBenefits.CoordinationofBenefitsCode_03 = "1";
            Loop_2320.COB_CoordinationOfBenefits.ServiceTypeCode_04 = "1";

            Loop_2320.REF_AdditionalCoordinationOfBenefitsIdentifiers = new List<REF>();
            REF REFAccountCode = new REF();
            REFAccountCode.ReferenceIdentificationQualifier_01 = "60";
            REFAccountCode.ReferenceIdentification_02 = "12345";
            Loop_2320.REF_AdditionalCoordinationOfBenefitsIdentifiers.Add(REFAccountCode);

            Loop_2320.DTP_CoordinationOfBenefitsEleigibilityDates = new List<DTP>();
            DTP DTP_CoordinationOfBenefitBegin = new DTP();
            DTP_CoordinationOfBenefitBegin.DateTimeQualifier_01 = "334";
            DTP_CoordinationOfBenefitBegin.DateTimePeriodFormatQualifier_02 = "D8";
            DTP_CoordinationOfBenefitBegin.DateTimePeriod_03 = "20150101";

            result.Loop_2320.Add(Loop_2320);

            Loop_2330 Loop_2330 = new Loop_2330();
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity = new NM1_InsuranceProviderName();
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity.EntityIdentifierCode_01 = "IN";
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity.EntityTypeQualifier_02 = "2";
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity.ReferringProviderLastName_03 = "Insurance";
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity.ReferringProviderFirstName_04 = "ABC";
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity.IdentificationCodeQualifier_08 = "FI";
            Loop_2330.NM1_CoordinationOfBenefitsRelatedEntity.ReferringProviderIdentifier_09 = "12-345678";
            //Misleading as "Loop" only contains NM1 element once.
            result.Loop_2330 = Loop_2330;

            //Optional Report Category
            //Misleading as "Loop" usually contains LX element only once.
            Loop_2700 Loop_2700 = new Loop_2700();
            Loop_2700.LX_MemberReportingCategories = new LX();
            Loop_2700.LX_MemberReportingCategories.AssignedNumber_01 = "2";

            return result;
        }

        /// <summary>
        /// Sample GS
        /// </summary>
        static GS CreateGs(string controlNumber)
        {
            return new GS
            {
                //  Functional ID Code
                CodeIdentifyingInformationType_1 = "IN",
                //  Application Senders Code
                SenderIDCode_2 = "RECEIVER1",
                //  Application Receivers Code
                ReceiverIDCode_3 = "SENDER1",
                //  Date
                Date_4 = DateTime.Now.Date.ToString("yyMMdd"),
                //  Time
                Time_5 = DateTime.Now.TimeOfDay.ToString("hhmm"),
                //  Group Control Number
                //  Must be unique to both partners for this interchange
                GroupControlNumber_6 = controlNumber.PadLeft(9, '0'),
                //  Responsible Agency Code
                TransactionTypeCode_7 = "X",
                //  Version/Release/Industry id code
                VersionAndRelease_8 = "005010X222A1"
            };
        }

        /// <summary>
        /// Sample ISA
        /// </summary>
        static ISA CreateIsa(string controlNumber)
        {
            return new ISA
            {
                //  Authorization Information Qualifier
                AuthorizationInformationQualifier_1 = "00",
                //  Authorization Information
                AuthorizationInformation_2 = "          ",
                //  Security Information Qualifier
                SecurityInformationQualifier_3 = "00",
                //  Security Information
                SecurityInformation_4 = "          ",
                //  Interchange ID Qualifier
                SenderIDQualifier_5 = "14",
                //  Interchange Sender
                InterchangeSenderID_6 = "RECEIVER1      ",
                //  Interchange ID Qualifier
                ReceiverIDQualifier_7 = "16",
                //  Interchange Receiver
                InterchangeReceiverID_8 = "SENDER1        ",
                //  Date
                InterchangeDate_9 = DateTime.Now.Date.ToString("yyMMdd"),
                //  Time
                InterchangeTime_10 = DateTime.Now.TimeOfDay.ToString("hhmm"),
                //  Standard identifier
                InterchangeControlStandardsIdentifier_11 = "U",
                //  Interchange Version ID
                //  This is the ISA version and not the transaction sets versions
                InterchangeControlVersionNumber_12 = "00501",
                //  Interchange Control Number
                InterchangeControlNumber_13 = controlNumber.PadLeft(9, '0'),
                //  Acknowledgment Requested (0 or 1)
                AcknowledgementRequested_14 = "1",
                //  Test Indicator
                UsageIndicator_15 = "T",
            };
        }

        static string LoadString(Stream stream)
        {
            stream.Position = 0;
            using (var reader = new StreamReader(stream, Encoding.Default))
            {
                return reader.ReadToEnd();
            }
        }

    }
}
